spring:
  application:
    name: analysis-service
  config:
    import: "zookeeper:"
  data:
    rest:
      base-path: /
  kafka:
    consumer:
      max-poll-records: 100
      max-poll-interval-ms: 300000
      min-batch-size: 10
      max-batch-size: 100
      max-partition-fetch-bytes: 10485760
      min-partition-fetch-bytes: 1024
      bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
      group-id: analysis-service-group
      auto-offset-reset: earliest
      # Remove conflicting deserializer configuration
      # key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://timescaledb:5432/centinel_test}
    username: ${SPRING_DATASOURCE_USERNAME:centinel_test}
    password: ${SPRING_DATASOURCE_PASSWORD:postpass}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        # Enable TimescaleDB extension
        jdbc:
          time_zone: UTC
    show-sql: false
# Management endpoints for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
# Server Configuration
server:
  port: 8080
signal:
  config:
    rsiPeriod: 14
    emaShort: 12
    emaLong: 26
    macdSignal: 9
    arbitrageThreshold: 0.0025
# Logging Configuration
logging:
  level:
    com.fedelis.centinel.analysis: INFO
    org.springframework.kafka: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
